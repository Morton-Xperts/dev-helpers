name: 'iOS Build'
description: Build iOS app and upload artifacts

inputs:
  env:
    description: "App environment"
    required: false
    default: 'staging'

runs:
  using: 'composite'
  steps:
    - name: 'Set up Just'
      uses: extractions/setup-just@v3

    - name: 'Enable Corepack'
      shell: bash
      run: corepack enable

    - name: 'Resolve ios.json'
      id: ios_cfg
      env:
        INPUT_ENV: ${{ inputs.env }}
      shell: bash
      run: |
        set -euo pipefail
        # Defaults if ios.json not provided
        NODE_VERSION="18"
        ENV_NAME="prd"
        ARCHIVE_ARTIFACT_NAME="iOS-archive"
        APP_ARTIFACT_NAME="iOS-app"

        if [ -f ios.json ]; then
          v() { jq -r "$1 // empty" ios.json 2>/dev/null || true; }
          # node version
          nv=$(v '.nodeVersion')
          [ -n "$nv" ] && NODE_VERSION="$nv"
          # artifact names
          aan=$(v '.archiveArtifactName')
          [ -n "$aan" ] && ARCHIVE_ARTIFACT_NAME="$aan"
          aan2=$(v '.appArtifactName')
          [ -n "$aan2" ] && APP_ARTIFACT_NAME="$aan2"
        fi

        # If an input env is provided, use it (do not source from ios.json)
        if [ -n "${INPUT_ENV:-}" ]; then
          ENV_NAME="$INPUT_ENV"
        fi

        echo "node_version=$NODE_VERSION" >> "$GITHUB_OUTPUT"
        echo "env_name=$ENV_NAME" >> "$GITHUB_OUTPUT"
        echo "archive_artifact_name=$ARCHIVE_ARTIFACT_NAME" >> "$GITHUB_OUTPUT"
        echo "app_artifact_name=$APP_ARTIFACT_NAME" >> "$GITHUB_OUTPUT"

    - name: 'Install Node.js'
      uses: actions/setup-node@v3
      with:
        node-version: ${{ steps.ios_cfg.outputs.node_version }}
        cache: 'yarn'

    - name: 'Cache CocoaPods'
      id: cocoapods-cache
      uses: actions/cache@v3
      with:
        path: ios/Pods
        key: ${{ runner.os }}-pods-${{ hashFiles('**/Podfile.lock') }}
        restore-keys: |
          ${{ runner.os }}-pods-

    - name: 'Run ios-build recipe'
      shell: bash
      env:
        NODE_OPTIONS: --openssl-legacy-provider
      run: |
        just build-ios env='${{ steps.ios_cfg.outputs.env_name }}'

    - name: 'Resolve iOS output paths from ios.json'
      id: ios_paths
      shell: bash
      run: |
        set -euo pipefail
        ARCHIVE_DIR="ios/build/Archive"
        APP_DIR="ios/build/App"
        if [ -f ios.json ]; then
          ARCHIVE_PATH=$(jq -r '.archivePath // empty' ios.json)
          EXPORT_PATH=$(jq -r '.exportPath // empty' ios.json)
          if [ -n "$ARCHIVE_PATH" ]; then
            # normalize to dir and prefix with ios/
            parent="${ARCHIVE_PATH%/*}"
            [ -z "$parent" ] && parent="build/Archive"
            ARCHIVE_DIR="ios/${parent}"
          fi
          if [ -n "$EXPORT_PATH" ]; then
            APP_DIR="ios/${EXPORT_PATH}"
          fi
        fi
        echo "archive_dir=$ARCHIVE_DIR" >> "$GITHUB_OUTPUT"
        echo "app_dir=$APP_DIR" >> "$GITHUB_OUTPUT"

    - name: 'Upload Intermediate Archive Artifact'
      uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.ios_cfg.outputs.archive_artifact_name }}
        path: ${{ steps.ios_paths.outputs.archive_dir }}

    - name: 'Upload Intermediate App Artifact'
      uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.ios_cfg.outputs.app_artifact_name }}
        path: ${{ steps.ios_paths.outputs.app_dir }}
